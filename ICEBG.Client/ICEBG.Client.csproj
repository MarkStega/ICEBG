<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<Nullable>disable</Nullable>
		<ImplicitUsings>disable</ImplicitUsings>
		<OutputType>Library</OutputType>
		<Version>2022-01-01--13-00-00--WIP</Version>
		<Configurations>Azure;DevServer;DevWebAssembly</Configurations>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Azure|AnyCPU'">
		<DefineConstants>AZURE;BLAZOR_SERVER</DefineConstants>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='DevServer|AnyCPU'">
		<DefineConstants>DEVELOP;BLAZOR_SERVER</DefineConstants>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='DevWebAssembly|AnyCPU'">
		<DefineConstants>DEVELOP;BLAZOR_WEBASSEMBLY</DefineConstants>
	</PropertyGroup>

	<ItemGroup>
		<AssemblyAttribute Include="ICEBG.Client.BuildDateAttribute">
			<_Parameter1>$([System.DateTime]::UtcNow.ToString("yyyy-MM-dd"))</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Blazored.LocalStorage" Version="4.3.0" />
		<PackageReference Include="GoogleAnalytics.Blazor" Version="1.0.3" />
		<PackageReference Include="Grpc.Net.Client" Version="2.52.0" />
		<PackageReference Include="Grpc.Net.Client.Web" Version="2.52.0" />
		<PackageReference Include="libphonenumber-csharp" Version="8.13.10" />
		<PackageReference Include="Material.Blazor" Version="4.0.0-preview.17" />
		<PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="8.0.0-preview.3.23177.8" />
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.0-preview.3.23177.8" />
		<PackageReference Include="Microsoft.AspNetCore.Http" Version="2.2.2" />
	</ItemGroup>

	<ItemGroup>
		<Folder Include="Properties\" />
		<Folder Include="wwwroot\css\" />
		<Folder Include="wwwroot\js\" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\ApplicationConfiguration\ApplicationConfiguration.csproj" />
		<ProjectReference Include="..\DataTier\DataTier.csproj" />
		<ProjectReference Include="..\SharedUtilities\SharedUtilities.csproj" />
	</ItemGroup>

	<ItemGroup>
		<UpToDateCheckInput Include="@(InputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckInput Include="@(InputStaticAssetsStyles)" Set="Styles" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsStyles)" Set="Styles" />
	</ItemGroup>

	<ItemGroup>
		<None Include="Pages\About.razor" />
		<None Include="Pages\Configuration.razor" />
		<None Include="Pages\Index.razor" />
		<None Include="Pages\Weather.razor" />
		<None Include="Shared\MainLayout.razor" />
	</ItemGroup>

	<ItemGroup>
		<InputImageFiles Include="$(ProjectDir)WebAssets\Images\*.*" />
		<InputPWAFiles Include="$(ProjectDir)WebAssets\PWA\*.*" />
		<InputAndroidInputImageFiles Include="$(ProjectDir)WebAssets\android-images\*.*" />
		<InputIOSInputImageFiles Include="$(ProjectDir)WebAssets\ios-images\*.*" />
		<InputWindows11InputImageFiles Include="$(ProjectDir)WebAssets\windows11-images\*.*" />

		<InputStaticAssetsScripts Include="$(ProjectDir)WebAssets\**\*.ts" />
		<OutputStaticAssetsScripts Include="$(ProjectDir)wwwroot\js\icebg.js;wwwroot\js\icebg.min.js" />

		<InputStaticAssetsStyles Include="$(ProjectDir)WebAssets\**\*.scss;" />
		<OutputStaticAssetsStyles Include="$(ProjectDir)wwwroot\css\icebg.css;wwwroot\css\icebg.min.css" />
		
		<!-- Temporary fixes until .net7 when dynamically copied content automatically copies to output -->
		<OutputImages Include="$(ProjectDir)wwwroot\**\*.*" />
		<Content Remove="@(OutputImages)" />
		<Content Include="@(OutputImages)" />
		<Content Remove="@(OutputStaticAssetsScripts)" />
		<Content Include="@(OutputStaticAssetsScripts)" />
		<Content Remove="@(OutputStaticAssetsStyles)" />
		<Content Include="@(OutputStaticAssetsStyles)" />
	</ItemGroup>

	<ItemGroup>
		<UpToDateCheckInput Include="@(InputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckInput Include="@(InputStaticAssetsStyles)" Set="Styles" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsStyles)" Set="Styles" />
	</ItemGroup>

	<!-- Remove comments once migrated to .net7 and dynamically copied content automatically copies to output -->
	<Target Name="WWWRootFileCopy" BeforeTargets="PreBuildEvent">
		<Message Importance="high" Text="***** WWWRootFileCopy" />
		<!--<Copy SourceFiles="@(InputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/images" />
		<Copy SourceFiles="@(InputPWAFiles)" DestinationFolder="$(ProjectDir)wwwroot/pwa" />
		<Copy SourceFiles="@(InputAndroidInputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/android-images" />
		<Copy SourceFiles="@(InputIOSInputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/ios-images" />
		<Copy SourceFiles="@(InputWindows11InputImageFiles)" DestinationFolder="$(ProjectDir)wwwroot/windows11-images" />-->
	</Target>

	<Target Name="CheckIfNpmExists" BeforeTargets="PreBuildEvent" AfterTargets="WWWRootFileCopy">
		<Message Importance="high" Text="***** npm install (test)" />
		<Exec Command="npm install" ContinueOnError="true" StandardOutputImportance="low" StandardErrorImportance="low" LogStandardErrorAsError="false" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="NpmReturnCode" />
		</Exec>
		<Message Text="***** 'npm install' return code was $(NpmReturnCode) (0 indicates npm is available)" />
	</Target>

	<Target Name="ErrorOutput" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' != '0' ">
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text=" CSS and JS not built due to the lack of a proper development environment" />
		<Message Importance="high" Text=" See https://material-blazor.com/docs/articles/DevelopmentEnvironment.html" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
	</Target>

	<Target Name="BuildScripts" Inputs="@(InputStaticAssetsScripts)" Outputs="@(OutputStaticAssetsScripts)" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">
		<RemoveDir Directories="$(ProjectDir)wwwroot/js" />

		<Message Importance="high" Text="***** npm install (scripts)" />
		<Exec Command="npm install" />

		<Message Importance="high" Text="***** npm run build-scripts" />
		<Exec Command="npm run build-scripts" />

		<Message Importance="high" Text="***** npm run build-js" />
		<Exec Command="npm run build-js" />

		<Message Importance="high" Text="***** npm run build-min-js" />
		<Exec Command="npm run build-min-js" />

		<Message Importance="high" Text="***** delete *temp.js" />
		<ItemGroup>
			<FilesToDelete Include="wwwroot/js/*temp.js" />
		</ItemGroup>
		<Delete Files="@(FilesToDelete)" />
	</Target>

	<Target Name="BuildStyles" Inputs="@(InputStaticAssetsStyles)" Outputs="@(OutputStaticAssetsStyles)" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">
		<Exec Command="echo ***** npm install (styles" />
		<Exec Command="npm install" />

		<Exec Command="echo ***** npm run build-css" />
		<Exec Command="npm run build-css" />

		<Exec Command="echo ***** npm run build-min-css" />
		<Exec Command="npm run build-min-css" />

	</Target>

	<!--All subsequent code contributed by https://github.com/SQL-MisterMagoo-->

	<PropertyGroup Condition="'$(_BlazorWebAssemblySdkToolAssembly)'==''">
		<!-- First, we strip the property value back to the root SDKs level and then down into the WebAssembly SDK -->
		<_SDKRoot>$(NetCoreRoot)sdk\$(NETCoreSDKVersion)\Sdks</_SDKRoot>
		<BlazorWebAssemblySdkDirectoryRoot>$(_SDKRoot)\Microsoft.NET.Sdk.BlazorWebAssembly\</BlazorWebAssemblySdkDirectoryRoot>

		<!-- The next two lines are derived from examples posted by the .NET Foundation. -->
		<_BlazorWebAssemblySdkTasksAssembly Condition="'$(_BlazorWebAssemblySdkTasksAssembly)'==''">$(BlazorWebAssemblySdkDirectoryRoot)tools\net472\Microsoft.NET.Sdk.BlazorWebAssembly.Tasks.dll</_BlazorWebAssemblySdkTasksAssembly>
		<_BlazorWebAssemblySdkToolAssembly Condition="'$(_BlazorWebAssemblySdkToolAssembly)'==''">$(BlazorWebAssemblySdkDirectoryRoot)tools\$(TargetFramework)\Microsoft.NET.Sdk.BlazorWebAssembly.Tool.dll</_BlazorWebAssemblySdkToolAssembly>
	</PropertyGroup>

	<!-- The next two lines are Copyright (c) .NET Foundation. All rights reserved. -->
	<UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BrotliCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
	<UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GzipCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />

	<!--
		This target runs after build. If you want to run after Publish, change:
		- AfterTargets should be set to "Build"
		- "ProjectDir" in MyStaticFiles should be changed to "PublishDir"
	-->
	<Target Name="CustomGZipAndBrotliCompression" AfterTargets="Build">

		<Message Importance="High" Text="======= Gzip/Brotli task assembly details=$(_BlazorWebAssemblySdkTasksAssembly)" />
		<Message Importance="High" Text="======= Brotli tool assembly details=$(_BlazorWebAssemblySdkToolAssembly)" />
		<Message Importance="High" Text="======= Brotli tool executable details=$(_RazorSdkDotNetHostFileName)" />
		<Message Importance="High" Text="======= Brotli tool path details=$(_RazorSdkDotNetHostDirectory)" />

		<!--************* THIS IS WHERE YOU CHOOSE WHAT TO COMPRESS *****************
			you probably don't want to change anything else - just this ItemGroup-->

		<ItemGroup>
			<MyStaticFiles Include="$(ProjectDir)/wwwroot/**/*.css" />
			<MyStaticFiles Include="$(ProjectDir)/wwwroot/**/*.js" />
		</ItemGroup>

		<!--Call the BlazorWebAssembly Task GZipCompress and store the results in MyCompressedFiles-->
		<GZipCompress FilesToCompress="@(MyStaticFiles)" OutputDirectory="$(IntermediateOutputPath)compress\">
			<Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" />
		</GZipCompress>

		<!--Call the BlazorWebAssembly Task BrotliCompress and store the results in MyCompressedFiles-->
		<BrotliCompress FilesToCompress="@(MyStaticFiles)" OutputDirectory="$(IntermediateOutputPath)compress\" ToolAssembly="$(_BlazorWebAssemblySdkToolAssembly)" ToolExe="$(_RazorSdkDotNetHostFileName)" ToolPath="$(_RazorSdkDotNetHostDirectory)">
			<Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" />
		</BrotliCompress>

		<!--Log what we have done-->
		<Message Importance="High" Text="======= Brotli/GZip Compression For @(MyCompressedFiles-&gt;Count()) Static Files =======" />
		<Message Importance="High" Text=" Compressed: %(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" />

		<!--Rename/move the compressed files back to to the correct place/names as they have "hashed" names at this stage.-->
		<Move SourceFiles="%(MyCompressedFiles.FullPath)" DestinationFiles="%(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" />

	</Target>

</Project>
