name: GithubActionsWIP

on:
  push:
    branches:
      - 'main'

  pull_request:
    branches:
      - 'main'

env:
  appNameDS: 'icebg.web.ds.wip'
  appNameUI: 'icebg.web.ui.wip'
  blazorServerDockerFile: './ICEBG.Web.UserInterface/Dockerfile-Server'
  blazorWebAssemblyDockerFile: './ICEBG.Web.UserInterface/Dockerfile-WebAssembly'

jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  perform-deployment:
    name: Perform deployment
    runs-on: ubuntu-latest
    if: github.repository == 'MarkStega/ICEBG' && github.actor != 'dependabot[bot]'
    steps:
    - name: Nothing to see here
      run: echo ""

  skip-deployment:
    name: Skip deployment
    runs-on: ubuntu-latest
    if: github.repository != 'MarkStega/ICEBG' || github.actor == 'dependabot[bot]'
    steps:
    - name: Nothing to see here
      run: echo ""

  build-allowed:
    name: Build allowed
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - name: Nothing to see here
      run: echo ""

############################################################################################################
# Set unified version for the two deployed applications
############################################################################################################
  set-unified-version:
    name: Create the date based UnifiedVersion
    needs: [perform-deployment]
    runs-on: ubuntu-latest
    outputs:
      unifiedVersion: ${{ steps.setUnifiedVersion.outputs.LocalUnifiedVersion }}

    steps:
    - id: setUnifiedVersion
      run: echo "LocalUnifiedVersion=$(date +'%Y-%m-%d--%H-%M-%S')--WIP" >> $GITHUB_OUTPUT
      shell: bash

############################################################################################################
# Build and deploy blazor DS image
############################################################################################################
  build-deploy-ds:
    name: Build and deploy ICEBG DS
    needs: [set-unified-version]
    runs-on: ubuntu-latest

    steps:
    - name: Retrieve the global UnifiedVersion
      run: echo "unifiedVersion=${{needs.set-unified-version.outputs.unifiedVersion}}" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
        dotnet-quality: 'preview'

    - name: Docker login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Publish, tag, and push DS image
      run: |
        dotnet publish ICEBG.Web.DataServices/ICEBG.Web.DataServices.csproj --os linux --arch x64 --configuration Azure -p:PublishProfile=DefaultContainer -p:Version=${{ env.unifiedVersion }} -p:ContainerImageName=${{env.appNameDS}}
        docker tag ${{env.appNameDS}}:${{ env.unifiedVersion }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.appNameDS}}:${{ env.unifiedVersion }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.appNameDS}}:${{ env.unifiedVersion }}
        docker images

############################################################################################################
# Build and deploy blazor UI image
############################################################################################################
  build-deploy-ui:
    name: Build and deploy ICEBG UI
    needs: [set-unified-version]
    runs-on: ubuntu-latest

    steps:
    - name: Retrieve the global UnifiedVersion
      run: echo "unifiedVersion=${{needs.set-unified-version.outputs.unifiedVersion}}" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
        dotnet-quality: 'preview'

    - name: 'Docker login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Publish, tag, and push UI image
      run: |
        dotnet publish ICEBG.Web.UserInterface/ICEBG.Web.UserInterface.csproj --os linux --arch x64 --configuration Azure -p:PublishProfile=DefaultContainer -p:Version=${{ env.unifiedVersion }} -p:ContainerImageName=${{env.appNameUI}} --sc
        docker tag ${{env.appNameUI}}:${{ env.unifiedVersion }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.appNameUI}}:${{ env.unifiedVersion }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.appNameUI}}:${{ env.unifiedVersion }}
        docker images
  
      # run: |
      #   docker build . --file ${{ env.blazorServerDockerFile }} --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.appNameUI }}:${{ env.unifiedVersion }} --build-arg version=${{ env.unifiedVersion }}
      #   docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.appNameUI }}:${{ env.unifiedVersion }}

############################################################################################################
# Build blazor DS image
############################################################################################################
  build-ds:
    name: Build ICEBG DS
    needs: [skip-deployment, build-allowed]
    runs-on: ubuntu-latest

    steps:
    - name: Set unifiedVersion as env variable
      run: echo "unifiedVersion=$(date +'%Y-%m-%d--%H-%M-%S')--WIP" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
        dotnet-quality: 'preview'

    - name: Build DS image
      run: |
        dotnet build ICEBG.Web.DataServices/ICEBG.Web.DataServices.csproj --os linux --arch x64 --configuration Azure -p:Version=${{ env.unifiedVersion }}

############################################################################################################
# Build blazor UI image
############################################################################################################
  build-ui:
    name: Build ICEBG UI
    needs: [skip-deployment, build-allowed]
    runs-on: ubuntu-latest

    steps:
    - name: Set unifiedVersion as env variable
      run: echo "unifiedVersion=$(date +'%Y-%m-%d--%H-%M-%S')--WIP" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
        dotnet-quality: 'preview'

    - name: Build UI image
      run: |
        dotnet build ICEBG.Web.UserInterface/ICEBG.Web.UserInterface.csproj --os linux --arch x64 --configuration Azure -p:PublishProfile=DefaultContainer -p:Version=${{ env.unifiedVersion }}
